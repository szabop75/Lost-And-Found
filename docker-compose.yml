services:
  db:
    image: postgres:16-alpine
    container_name: lostandfound-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    # Use prebuilt image from GHCR (set GHCR_OWNER in .env)
    image: ghcr.io/${GHCR_OWNER}/lostandfound-api:latest
    # For local builds instead of pulling from GHCR, comment the image line above
    # and uncomment the build block below:
    # build:
    #   context: .
    #   dockerfile: backend/LostAndFound.Api/Dockerfile
    container_name: lostandfound-api
    depends_on:
      - db
    env_file:
      - backend/.env.production
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      # Bind via env to the internal postgres service 'db'
      ConnectionStrings__DefaultConnection: Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};SSL Mode=Disable
    restart: unless-stopped
    networks:
      - default
      - proxy

  frontend:
    image: ghcr.io/${GHCR_OWNER}/lostandfound-frontend:latest
    container_name: lostandfound-frontend
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - proxy

  adminer:
    image: adminer:4
    container_name: lostandfound-adminer
    profiles: ["dev"]
    depends_on:
      - db
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db

volumes:
  db_data:

networks:
  proxy:
    name: ${PROXY_NETWORK}
    external: true
